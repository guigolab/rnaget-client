// Code generated by go-swagger; DO NOT EDIT.

package files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSearchFilesParams creates a new SearchFilesParams object
// with the default values initialized.
func NewSearchFilesParams() *SearchFilesParams {
	var ()
	return &SearchFilesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSearchFilesParamsWithTimeout creates a new SearchFilesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSearchFilesParamsWithTimeout(timeout time.Duration) *SearchFilesParams {
	var ()
	return &SearchFilesParams{

		timeout: timeout,
	}
}

// NewSearchFilesParamsWithContext creates a new SearchFilesParams object
// with the default values initialized, and the ability to set a context for a request
func NewSearchFilesParamsWithContext(ctx context.Context) *SearchFilesParams {
	var ()
	return &SearchFilesParams{

		Context: ctx,
	}
}

// NewSearchFilesParamsWithHTTPClient creates a new SearchFilesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSearchFilesParamsWithHTTPClient(client *http.Client) *SearchFilesParams {
	var ()
	return &SearchFilesParams{
		HTTPClient: client,
	}
}

/*SearchFilesParams contains all the parameters to send to the API endpoint
for the search files operation typically these are written to a http.Request
*/
type SearchFilesParams struct {

	/*FileType
	  File type to filter by

	*/
	FileType *string
	/*ProjectID
	  ProjectID to filter by

	*/
	ProjectID *string
	/*StudyID
	  StudyID to filter by

	*/
	StudyID *string
	/*Tags
	  Comma separated tag list to filter by

	*/
	Tags []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the search files params
func (o *SearchFilesParams) WithTimeout(timeout time.Duration) *SearchFilesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search files params
func (o *SearchFilesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search files params
func (o *SearchFilesParams) WithContext(ctx context.Context) *SearchFilesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search files params
func (o *SearchFilesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search files params
func (o *SearchFilesParams) WithHTTPClient(client *http.Client) *SearchFilesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search files params
func (o *SearchFilesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFileType adds the fileType to the search files params
func (o *SearchFilesParams) WithFileType(fileType *string) *SearchFilesParams {
	o.SetFileType(fileType)
	return o
}

// SetFileType adds the fileType to the search files params
func (o *SearchFilesParams) SetFileType(fileType *string) {
	o.FileType = fileType
}

// WithProjectID adds the projectID to the search files params
func (o *SearchFilesParams) WithProjectID(projectID *string) *SearchFilesParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the search files params
func (o *SearchFilesParams) SetProjectID(projectID *string) {
	o.ProjectID = projectID
}

// WithStudyID adds the studyID to the search files params
func (o *SearchFilesParams) WithStudyID(studyID *string) *SearchFilesParams {
	o.SetStudyID(studyID)
	return o
}

// SetStudyID adds the studyId to the search files params
func (o *SearchFilesParams) SetStudyID(studyID *string) {
	o.StudyID = studyID
}

// WithTags adds the tags to the search files params
func (o *SearchFilesParams) WithTags(tags []string) *SearchFilesParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the search files params
func (o *SearchFilesParams) SetTags(tags []string) {
	o.Tags = tags
}

// WriteToRequest writes these params to a swagger request
func (o *SearchFilesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FileType != nil {

		// query param fileType
		var qrFileType string
		if o.FileType != nil {
			qrFileType = *o.FileType
		}
		qFileType := qrFileType
		if qFileType != "" {
			if err := r.SetQueryParam("fileType", qFileType); err != nil {
				return err
			}
		}

	}

	if o.ProjectID != nil {

		// query param projectID
		var qrProjectID string
		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := qrProjectID
		if qProjectID != "" {
			if err := r.SetQueryParam("projectID", qProjectID); err != nil {
				return err
			}
		}

	}

	if o.StudyID != nil {

		// query param studyID
		var qrStudyID string
		if o.StudyID != nil {
			qrStudyID = *o.StudyID
		}
		qStudyID := qrStudyID
		if qStudyID != "" {
			if err := r.SetQueryParam("studyID", qStudyID); err != nil {
				return err
			}
		}

	}

	valuesTags := o.Tags

	joinedTags := swag.JoinByFormat(valuesTags, "csv")
	// query array param tags
	if err := r.SetQueryParam("tags", joinedTags...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
