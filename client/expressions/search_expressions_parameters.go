// Code generated by go-swagger; DO NOT EDIT.

package expressions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSearchExpressionsParams creates a new SearchExpressionsParams object
// with the default values initialized.
func NewSearchExpressionsParams() *SearchExpressionsParams {
	var ()
	return &SearchExpressionsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSearchExpressionsParamsWithTimeout creates a new SearchExpressionsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSearchExpressionsParamsWithTimeout(timeout time.Duration) *SearchExpressionsParams {
	var ()
	return &SearchExpressionsParams{

		timeout: timeout,
	}
}

// NewSearchExpressionsParamsWithContext creates a new SearchExpressionsParams object
// with the default values initialized, and the ability to set a context for a request
func NewSearchExpressionsParamsWithContext(ctx context.Context) *SearchExpressionsParams {
	var ()
	return &SearchExpressionsParams{

		Context: ctx,
	}
}

// NewSearchExpressionsParamsWithHTTPClient creates a new SearchExpressionsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSearchExpressionsParamsWithHTTPClient(client *http.Client) *SearchExpressionsParams {
	var ()
	return &SearchExpressionsParams{
		HTTPClient: client,
	}
}

/*SearchExpressionsParams contains all the parameters to send to the API endpoint
for the search expressions operation typically these are written to a http.Request
*/
type SearchExpressionsParams struct {

	/*FeatureAccessionList
	  return only values for listed accession numbers

	*/
	FeatureAccessionList []string
	/*FeatureIDList
	  return only values for listed feature IDs

	*/
	FeatureIDList []string
	/*FeatureNameList
	  return only values for listed features

	*/
	FeatureNameList []string
	/*ProjectID
	  project to filter by

	*/
	ProjectID *string
	/*SampleIDList
	  comma separated list of sampleIDs to match

	*/
	SampleIDList []string
	/*StudyID
	  study to filter by

	*/
	StudyID *string
	/*Tags
	  Comma separated tag list to filter by

	*/
	Tags []string
	/*Version
	  version to filter by

	*/
	Version *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the search expressions params
func (o *SearchExpressionsParams) WithTimeout(timeout time.Duration) *SearchExpressionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search expressions params
func (o *SearchExpressionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search expressions params
func (o *SearchExpressionsParams) WithContext(ctx context.Context) *SearchExpressionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search expressions params
func (o *SearchExpressionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search expressions params
func (o *SearchExpressionsParams) WithHTTPClient(client *http.Client) *SearchExpressionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search expressions params
func (o *SearchExpressionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFeatureAccessionList adds the featureAccessionList to the search expressions params
func (o *SearchExpressionsParams) WithFeatureAccessionList(featureAccessionList []string) *SearchExpressionsParams {
	o.SetFeatureAccessionList(featureAccessionList)
	return o
}

// SetFeatureAccessionList adds the featureAccessionList to the search expressions params
func (o *SearchExpressionsParams) SetFeatureAccessionList(featureAccessionList []string) {
	o.FeatureAccessionList = featureAccessionList
}

// WithFeatureIDList adds the featureIDList to the search expressions params
func (o *SearchExpressionsParams) WithFeatureIDList(featureIDList []string) *SearchExpressionsParams {
	o.SetFeatureIDList(featureIDList)
	return o
}

// SetFeatureIDList adds the featureIdList to the search expressions params
func (o *SearchExpressionsParams) SetFeatureIDList(featureIDList []string) {
	o.FeatureIDList = featureIDList
}

// WithFeatureNameList adds the featureNameList to the search expressions params
func (o *SearchExpressionsParams) WithFeatureNameList(featureNameList []string) *SearchExpressionsParams {
	o.SetFeatureNameList(featureNameList)
	return o
}

// SetFeatureNameList adds the featureNameList to the search expressions params
func (o *SearchExpressionsParams) SetFeatureNameList(featureNameList []string) {
	o.FeatureNameList = featureNameList
}

// WithProjectID adds the projectID to the search expressions params
func (o *SearchExpressionsParams) WithProjectID(projectID *string) *SearchExpressionsParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the search expressions params
func (o *SearchExpressionsParams) SetProjectID(projectID *string) {
	o.ProjectID = projectID
}

// WithSampleIDList adds the sampleIDList to the search expressions params
func (o *SearchExpressionsParams) WithSampleIDList(sampleIDList []string) *SearchExpressionsParams {
	o.SetSampleIDList(sampleIDList)
	return o
}

// SetSampleIDList adds the sampleIdList to the search expressions params
func (o *SearchExpressionsParams) SetSampleIDList(sampleIDList []string) {
	o.SampleIDList = sampleIDList
}

// WithStudyID adds the studyID to the search expressions params
func (o *SearchExpressionsParams) WithStudyID(studyID *string) *SearchExpressionsParams {
	o.SetStudyID(studyID)
	return o
}

// SetStudyID adds the studyId to the search expressions params
func (o *SearchExpressionsParams) SetStudyID(studyID *string) {
	o.StudyID = studyID
}

// WithTags adds the tags to the search expressions params
func (o *SearchExpressionsParams) WithTags(tags []string) *SearchExpressionsParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the search expressions params
func (o *SearchExpressionsParams) SetTags(tags []string) {
	o.Tags = tags
}

// WithVersion adds the version to the search expressions params
func (o *SearchExpressionsParams) WithVersion(version *string) *SearchExpressionsParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the search expressions params
func (o *SearchExpressionsParams) SetVersion(version *string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *SearchExpressionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesFeatureAccessionList := o.FeatureAccessionList

	joinedFeatureAccessionList := swag.JoinByFormat(valuesFeatureAccessionList, "")
	// query array param featureAccessionList
	if err := r.SetQueryParam("featureAccessionList", joinedFeatureAccessionList...); err != nil {
		return err
	}

	valuesFeatureIDList := o.FeatureIDList

	joinedFeatureIDList := swag.JoinByFormat(valuesFeatureIDList, "")
	// query array param featureIDList
	if err := r.SetQueryParam("featureIDList", joinedFeatureIDList...); err != nil {
		return err
	}

	valuesFeatureNameList := o.FeatureNameList

	joinedFeatureNameList := swag.JoinByFormat(valuesFeatureNameList, "")
	// query array param featureNameList
	if err := r.SetQueryParam("featureNameList", joinedFeatureNameList...); err != nil {
		return err
	}

	if o.ProjectID != nil {

		// query param projectID
		var qrProjectID string
		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := qrProjectID
		if qProjectID != "" {
			if err := r.SetQueryParam("projectID", qProjectID); err != nil {
				return err
			}
		}

	}

	valuesSampleIDList := o.SampleIDList

	joinedSampleIDList := swag.JoinByFormat(valuesSampleIDList, "csv")
	// query array param sampleIDList
	if err := r.SetQueryParam("sampleIDList", joinedSampleIDList...); err != nil {
		return err
	}

	if o.StudyID != nil {

		// query param studyID
		var qrStudyID string
		if o.StudyID != nil {
			qrStudyID = *o.StudyID
		}
		qStudyID := qrStudyID
		if qStudyID != "" {
			if err := r.SetQueryParam("studyID", qStudyID); err != nil {
				return err
			}
		}

	}

	valuesTags := o.Tags

	joinedTags := swag.JoinByFormat(valuesTags, "csv")
	// query array param tags
	if err := r.SetQueryParam("tags", joinedTags...); err != nil {
		return err
	}

	if o.Version != nil {

		// query param version
		var qrVersion string
		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := qrVersion
		if qVersion != "" {
			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
