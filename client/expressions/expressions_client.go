// Code generated by go-swagger; DO NOT EDIT.

package expressions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new expressions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for expressions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetExpressionByID finds expression data by ID

Returns a single specified expression matrix
*/
func (a *Client) GetExpressionByID(params *GetExpressionByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetExpressionByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExpressionByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExpressionById",
		Method:             "GET",
		PathPattern:        "/expressions/{expressionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExpressionByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExpressionByIDOK), nil

}

/*
SearchExpressionFilters returns filters for project searches

Get filters for project searches
*/
func (a *Client) SearchExpressionFilters(params *SearchExpressionFiltersParams, authInfo runtime.ClientAuthInfoWriter) (*SearchExpressionFiltersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchExpressionFiltersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "searchExpressionFilters",
		Method:             "GET",
		PathPattern:        "/expressions/search/filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchExpressionFiltersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchExpressionFiltersOK), nil

}

/*
SearchExpressions searches for expressions matching filters

Search for expressions matching filters
*/
func (a *Client) SearchExpressions(params *SearchExpressionsParams, authInfo runtime.ClientAuthInfoWriter) (*SearchExpressionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchExpressionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "searchExpressions",
		Method:             "GET",
		PathPattern:        "/expressions/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchExpressionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchExpressionsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
