// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSearchProjectsParams creates a new SearchProjectsParams object
// with the default values initialized.
func NewSearchProjectsParams() *SearchProjectsParams {
	var ()
	return &SearchProjectsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSearchProjectsParamsWithTimeout creates a new SearchProjectsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSearchProjectsParamsWithTimeout(timeout time.Duration) *SearchProjectsParams {
	var ()
	return &SearchProjectsParams{

		timeout: timeout,
	}
}

// NewSearchProjectsParamsWithContext creates a new SearchProjectsParams object
// with the default values initialized, and the ability to set a context for a request
func NewSearchProjectsParamsWithContext(ctx context.Context) *SearchProjectsParams {
	var ()
	return &SearchProjectsParams{

		Context: ctx,
	}
}

// NewSearchProjectsParamsWithHTTPClient creates a new SearchProjectsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSearchProjectsParamsWithHTTPClient(client *http.Client) *SearchProjectsParams {
	var ()
	return &SearchProjectsParams{
		HTTPClient: client,
	}
}

/*SearchProjectsParams contains all the parameters to send to the API endpoint
for the search projects operation typically these are written to a http.Request
*/
type SearchProjectsParams struct {

	/*Tags
	  Comma separated tag list to filter by

	*/
	Tags []string
	/*Version
	  version to return

	*/
	Version *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the search projects params
func (o *SearchProjectsParams) WithTimeout(timeout time.Duration) *SearchProjectsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search projects params
func (o *SearchProjectsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search projects params
func (o *SearchProjectsParams) WithContext(ctx context.Context) *SearchProjectsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search projects params
func (o *SearchProjectsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search projects params
func (o *SearchProjectsParams) WithHTTPClient(client *http.Client) *SearchProjectsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search projects params
func (o *SearchProjectsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTags adds the tags to the search projects params
func (o *SearchProjectsParams) WithTags(tags []string) *SearchProjectsParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the search projects params
func (o *SearchProjectsParams) SetTags(tags []string) {
	o.Tags = tags
}

// WithVersion adds the version to the search projects params
func (o *SearchProjectsParams) WithVersion(version *string) *SearchProjectsParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the search projects params
func (o *SearchProjectsParams) SetVersion(version *string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *SearchProjectsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesTags := o.Tags

	joinedTags := swag.JoinByFormat(valuesTags, "csv")
	// query array param tags
	if err := r.SetQueryParam("tags", joinedTags...); err != nil {
		return err
	}

	if o.Version != nil {

		// query param version
		var qrVersion string
		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := qrVersion
		if qVersion != "" {
			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
