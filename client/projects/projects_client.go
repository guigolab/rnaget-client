// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new projects API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for projects API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetProjectByID finds project by ID

Returns a single specified project
*/
func (a *Client) GetProjectByID(params *GetProjectByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProjectById",
		Method:             "GET",
		PathPattern:        "/projects/{projectId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProjectByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProjectByIDOK), nil

}

/*
SearchProjectFilters returns filters for project searches

Get filters for project searches
*/
func (a *Client) SearchProjectFilters(params *SearchProjectFiltersParams, authInfo runtime.ClientAuthInfoWriter) (*SearchProjectFiltersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchProjectFiltersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "searchProjectFilters",
		Method:             "GET",
		PathPattern:        "/projects/search/filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchProjectFiltersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchProjectFiltersOK), nil

}

/*
SearchProjects searches for projects matching filters

Search for projects matching filters
*/
func (a *Client) SearchProjects(params *SearchProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*SearchProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchProjectsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "searchProjects",
		Method:             "GET",
		PathPattern:        "/projects/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchProjectsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
