// Code generated by go-swagger; DO NOT EDIT.

package studies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetStudyByIDParams creates a new GetStudyByIDParams object
// with the default values initialized.
func NewGetStudyByIDParams() *GetStudyByIDParams {
	var ()
	return &GetStudyByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetStudyByIDParamsWithTimeout creates a new GetStudyByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetStudyByIDParamsWithTimeout(timeout time.Duration) *GetStudyByIDParams {
	var ()
	return &GetStudyByIDParams{

		timeout: timeout,
	}
}

// NewGetStudyByIDParamsWithContext creates a new GetStudyByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetStudyByIDParamsWithContext(ctx context.Context) *GetStudyByIDParams {
	var ()
	return &GetStudyByIDParams{

		Context: ctx,
	}
}

// NewGetStudyByIDParamsWithHTTPClient creates a new GetStudyByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetStudyByIDParamsWithHTTPClient(client *http.Client) *GetStudyByIDParams {
	var ()
	return &GetStudyByIDParams{
		HTTPClient: client,
	}
}

/*GetStudyByIDParams contains all the parameters to send to the API endpoint
for the get study by Id operation typically these are written to a http.Request
*/
type GetStudyByIDParams struct {

	/*StudyID
	  ID of study to return

	*/
	StudyID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get study by Id params
func (o *GetStudyByIDParams) WithTimeout(timeout time.Duration) *GetStudyByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get study by Id params
func (o *GetStudyByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get study by Id params
func (o *GetStudyByIDParams) WithContext(ctx context.Context) *GetStudyByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get study by Id params
func (o *GetStudyByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get study by Id params
func (o *GetStudyByIDParams) WithHTTPClient(client *http.Client) *GetStudyByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get study by Id params
func (o *GetStudyByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithStudyID adds the studyID to the get study by Id params
func (o *GetStudyByIDParams) WithStudyID(studyID string) *GetStudyByIDParams {
	o.SetStudyID(studyID)
	return o
}

// SetStudyID adds the studyId to the get study by Id params
func (o *GetStudyByIDParams) SetStudyID(studyID string) {
	o.StudyID = studyID
}

// WriteToRequest writes these params to a swagger request
func (o *GetStudyByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param studyId
	if err := r.SetPathParam("studyId", o.StudyID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
