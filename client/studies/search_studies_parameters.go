// Code generated by go-swagger; DO NOT EDIT.

package studies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSearchStudiesParams creates a new SearchStudiesParams object
// with the default values initialized.
func NewSearchStudiesParams() *SearchStudiesParams {
	var ()
	return &SearchStudiesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSearchStudiesParamsWithTimeout creates a new SearchStudiesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSearchStudiesParamsWithTimeout(timeout time.Duration) *SearchStudiesParams {
	var ()
	return &SearchStudiesParams{

		timeout: timeout,
	}
}

// NewSearchStudiesParamsWithContext creates a new SearchStudiesParams object
// with the default values initialized, and the ability to set a context for a request
func NewSearchStudiesParamsWithContext(ctx context.Context) *SearchStudiesParams {
	var ()
	return &SearchStudiesParams{

		Context: ctx,
	}
}

// NewSearchStudiesParamsWithHTTPClient creates a new SearchStudiesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSearchStudiesParamsWithHTTPClient(client *http.Client) *SearchStudiesParams {
	var ()
	return &SearchStudiesParams{
		HTTPClient: client,
	}
}

/*SearchStudiesParams contains all the parameters to send to the API endpoint
for the search studies operation typically these are written to a http.Request
*/
type SearchStudiesParams struct {

	/*Tags
	  Comma separated tag list to filter by

	*/
	Tags []string
	/*Version
	  version to return

	*/
	Version *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the search studies params
func (o *SearchStudiesParams) WithTimeout(timeout time.Duration) *SearchStudiesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search studies params
func (o *SearchStudiesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search studies params
func (o *SearchStudiesParams) WithContext(ctx context.Context) *SearchStudiesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search studies params
func (o *SearchStudiesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search studies params
func (o *SearchStudiesParams) WithHTTPClient(client *http.Client) *SearchStudiesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search studies params
func (o *SearchStudiesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTags adds the tags to the search studies params
func (o *SearchStudiesParams) WithTags(tags []string) *SearchStudiesParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the search studies params
func (o *SearchStudiesParams) SetTags(tags []string) {
	o.Tags = tags
}

// WithVersion adds the version to the search studies params
func (o *SearchStudiesParams) WithVersion(version *string) *SearchStudiesParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the search studies params
func (o *SearchStudiesParams) SetVersion(version *string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *SearchStudiesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesTags := o.Tags

	joinedTags := swag.JoinByFormat(valuesTags, "csv")
	// query array param tags
	if err := r.SetQueryParam("tags", joinedTags...); err != nil {
		return err
	}

	if o.Version != nil {

		// query param version
		var qrVersion string
		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := qrVersion
		if qVersion != "" {
			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
