// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

// Error defines model for error.
type Error struct {
	Message *string `json:"message,omitempty"`
}

// Filter defines model for filter.
type Filter struct {
	Description *string   `json:"description,omitempty"`
	FieldType   *string   `json:"fieldType,omitempty"`
	Filter      string    `json:"filter"`
	Values      *[]string `json:"values,omitempty"`
}

// Project defines model for project.
type Project struct {
	Description *string `json:"description,omitempty"`
	Id          string  `json:"id"`
	Name        *string `json:"name,omitempty"`
	Version     *string `json:"version,omitempty"`
}

// Study defines model for study.
type Study struct {
	Description     *string `json:"description,omitempty"`
	Genome          *string `json:"genome,omitempty"`
	Id              string  `json:"id"`
	Name            *string `json:"name,omitempty"`
	ParentProjectID *string `json:"parentProjectID,omitempty"`
	Version         *string `json:"version,omitempty"`
}

// Ticket defines model for ticket.
type Ticket struct {
	FileType *string                 `json:"fileType,omitempty"`
	Headers  *map[string]interface{} `json:"headers,omitempty"`
	Md5      *string                 `json:"md5,omitempty"`
	StudyID  *string                 `json:"studyID,omitempty"`
	Units    string                  `json:"units"`
	Url      string                  `json:"url"`
	Version  *string                 `json:"version,omitempty"`
}

// ChrParam defines model for chrParam.
type ChrParam string

// EndParam defines model for endParam.
type EndParam int32

// FeatureIDListParam defines model for featureIDListParam.
type FeatureIDListParam []string

// FeatureNameListParam defines model for featureNameListParam.
type FeatureNameListParam []string

// ProjectIDParam defines model for projectIDParam.
type ProjectIDParam string

// SampleIDListParam defines model for sampleIDListParam.
type SampleIDListParam []string

// StartParam defines model for startParam.
type StartParam int32

// StudyIDParam defines model for studyIDParam.
type StudyIDParam string

// VersionParam defines model for versionParam.
type VersionParam string

// GetContinuousFileParams defines parameters for GetContinuousFile.
type GetContinuousFileParams struct {

	// Data format to return
	Format string `json:"format"`

	// project to filter by
	ProjectID *ProjectIDParam `json:"projectID,omitempty"`

	// study to filter by
	StudyID *StudyIDParam `json:"studyID,omitempty"`

	// version to filter by
	Version *VersionParam `json:"version,omitempty"`

	// return only values for listed sampleIDs
	SampleIDList *SampleIDListParam `json:"sampleIDList,omitempty"`

	// The refererence to which start and end apply in the form chr? where ? is the specific ID of the chromosome (ex. chr1, chrX).
	Chr *ChrParam `json:"chr,omitempty"`

	// The start position of the range on the sequence, 0-based, inclusive.
	Start *StartParam `json:"start,omitempty"`

	// The end position of the range on the sequence, 0-based, exclusive.
	End *EndParam `json:"end,omitempty"`
}

// GetContinuousTicketParams defines parameters for GetContinuousTicket.
type GetContinuousTicketParams struct {

	// Data format to return
	Format string `json:"format"`

	// project to filter by
	ProjectID *ProjectIDParam `json:"projectID,omitempty"`

	// study to filter by
	StudyID *StudyIDParam `json:"studyID,omitempty"`

	// version to filter by
	Version *VersionParam `json:"version,omitempty"`

	// return only values for listed sampleIDs
	SampleIDList *SampleIDListParam `json:"sampleIDList,omitempty"`

	// The refererence to which start and end apply in the form chr? where ? is the specific ID of the chromosome (ex. chr1, chrX).
	Chr *ChrParam `json:"chr,omitempty"`

	// The start position of the range on the sequence, 0-based, inclusive.
	Start *StartParam `json:"start,omitempty"`

	// The end position of the range on the sequence, 0-based, exclusive.
	End *EndParam `json:"end,omitempty"`
}

// GetContinuousFileByIdParams defines parameters for GetContinuousFileById.
type GetContinuousFileByIdParams struct {

	// The refererence to which start and end apply in the form chr? where ? is the specific ID of the chromosome (ex. chr1, chrX).
	Chr *ChrParam `json:"chr,omitempty"`

	// The start position of the range on the sequence, 0-based, inclusive.
	Start *StartParam `json:"start,omitempty"`

	// The end position of the range on the sequence, 0-based, exclusive.
	End *EndParam `json:"end,omitempty"`
}

// GetContinuousTicketByIdParams defines parameters for GetContinuousTicketById.
type GetContinuousTicketByIdParams struct {

	// The refererence to which start and end apply in the form chr? where ? is the specific ID of the chromosome (ex. chr1, chrX).
	Chr *ChrParam `json:"chr,omitempty"`

	// The start position of the range on the sequence, 0-based, inclusive.
	Start *StartParam `json:"start,omitempty"`

	// The end position of the range on the sequence, 0-based, exclusive.
	End *EndParam `json:"end,omitempty"`
}

// GetExpressionFileParams defines parameters for GetExpressionFile.
type GetExpressionFileParams struct {

	// Data format to return
	Format string `json:"format"`

	// project to filter by
	ProjectID *ProjectIDParam `json:"projectID,omitempty"`

	// study to filter by
	StudyID *StudyIDParam `json:"studyID,omitempty"`

	// version to filter by
	Version *VersionParam `json:"version,omitempty"`

	// return only values for listed sampleIDs
	SampleIDList *SampleIDListParam `json:"sampleIDList,omitempty"`

	// return only values for listed feature IDs
	FeatureIDList *FeatureIDListParam `json:"featureIDList,omitempty"`

	// return only values for listed features
	FeatureNameList *FeatureNameListParam `json:"featureNameList,omitempty"`
}

// GetExpressionFiltersParams defines parameters for GetExpressionFilters.
type GetExpressionFiltersParams struct {

	// one of `feature` or `sample` reflecting which axis to request filters for.  If blank, both will be returned
	Type *string `json:"type,omitempty"`
}

// GetExpressionTicketParams defines parameters for GetExpressionTicket.
type GetExpressionTicketParams struct {

	// Data format to return
	Format string `json:"format"`

	// project to filter by
	ProjectID *ProjectIDParam `json:"projectID,omitempty"`

	// study to filter by
	StudyID *StudyIDParam `json:"studyID,omitempty"`

	// version to filter by
	Version *VersionParam `json:"version,omitempty"`

	// return only values for listed sampleIDs
	SampleIDList *SampleIDListParam `json:"sampleIDList,omitempty"`

	// return only values for listed feature IDs
	FeatureIDList *FeatureIDListParam `json:"featureIDList,omitempty"`

	// return only values for listed features
	FeatureNameList *FeatureNameListParam `json:"featureNameList,omitempty"`
}

// GetExpressionFileByIdParams defines parameters for GetExpressionFileById.
type GetExpressionFileByIdParams struct {

	// return only values for listed sampleIDs
	SampleIDList *SampleIDListParam `json:"sampleIDList,omitempty"`

	// return only values for listed feature IDs
	FeatureIDList *FeatureIDListParam `json:"featureIDList,omitempty"`

	// return only values for listed features
	FeatureNameList *FeatureNameListParam `json:"featureNameList,omitempty"`
}

// GetExpressionTicketByIdParams defines parameters for GetExpressionTicketById.
type GetExpressionTicketByIdParams struct {

	// return only values for listed sampleIDs
	SampleIDList *SampleIDListParam `json:"sampleIDList,omitempty"`

	// return only values for listed feature IDs
	FeatureIDList *FeatureIDListParam `json:"featureIDList,omitempty"`

	// return only values for listed features
	FeatureNameList *FeatureNameListParam `json:"featureNameList,omitempty"`
}

// GetProjectsParams defines parameters for GetProjects.
type GetProjectsParams struct {

	// version to filter by
	Version *VersionParam `json:"version,omitempty"`
}

// GetStudiesParams defines parameters for GetStudies.
type GetStudiesParams struct {

	// version to filter by
	Version *VersionParam `json:"version,omitempty"`
}

