// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(req *http.Request, ctx context.Context) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetContinuousFile request
	GetContinuousFile(ctx context.Context, params *GetContinuousFileParams) (*http.Response, error)

	// GetContinuousFilters request
	GetContinuousFilters(ctx context.Context) (*http.Response, error)

	// GetContinuousFormats request
	GetContinuousFormats(ctx context.Context) (*http.Response, error)

	// GetContinuousTicket request
	GetContinuousTicket(ctx context.Context, params *GetContinuousTicketParams) (*http.Response, error)

	// GetContinuousFileById request
	GetContinuousFileById(ctx context.Context, continuousId string, params *GetContinuousFileByIdParams) (*http.Response, error)

	// GetContinuousTicketById request
	GetContinuousTicketById(ctx context.Context, continuousId string, params *GetContinuousTicketByIdParams) (*http.Response, error)

	// GetExpressionFile request
	GetExpressionFile(ctx context.Context, params *GetExpressionFileParams) (*http.Response, error)

	// GetExpressionFilters request
	GetExpressionFilters(ctx context.Context, params *GetExpressionFiltersParams) (*http.Response, error)

	// GetExpressionFormats request
	GetExpressionFormats(ctx context.Context) (*http.Response, error)

	// GetExpressionTicket request
	GetExpressionTicket(ctx context.Context, params *GetExpressionTicketParams) (*http.Response, error)

	// GetExpressionFileById request
	GetExpressionFileById(ctx context.Context, expressionId string, params *GetExpressionFileByIdParams) (*http.Response, error)

	// GetExpressionTicketById request
	GetExpressionTicketById(ctx context.Context, expressionId string, params *GetExpressionTicketByIdParams) (*http.Response, error)

	// GetProjects request
	GetProjects(ctx context.Context, params *GetProjectsParams) (*http.Response, error)

	// GetProjectFilters request
	GetProjectFilters(ctx context.Context) (*http.Response, error)

	// GetProjectById request
	GetProjectById(ctx context.Context, projectId string) (*http.Response, error)

	// GetStudies request
	GetStudies(ctx context.Context, params *GetStudiesParams) (*http.Response, error)

	// GetStudyFilters request
	GetStudyFilters(ctx context.Context) (*http.Response, error)

	// GetStudyById request
	GetStudyById(ctx context.Context, studyId string) (*http.Response, error)
}

func (c *Client) GetContinuousFile(ctx context.Context, params *GetContinuousFileParams) (*http.Response, error) {
	req, err := NewGetContinuousFileRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetContinuousFilters(ctx context.Context) (*http.Response, error) {
	req, err := NewGetContinuousFiltersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetContinuousFormats(ctx context.Context) (*http.Response, error) {
	req, err := NewGetContinuousFormatsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetContinuousTicket(ctx context.Context, params *GetContinuousTicketParams) (*http.Response, error) {
	req, err := NewGetContinuousTicketRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetContinuousFileById(ctx context.Context, continuousId string, params *GetContinuousFileByIdParams) (*http.Response, error) {
	req, err := NewGetContinuousFileByIdRequest(c.Server, continuousId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetContinuousTicketById(ctx context.Context, continuousId string, params *GetContinuousTicketByIdParams) (*http.Response, error) {
	req, err := NewGetContinuousTicketByIdRequest(c.Server, continuousId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetExpressionFile(ctx context.Context, params *GetExpressionFileParams) (*http.Response, error) {
	req, err := NewGetExpressionFileRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetExpressionFilters(ctx context.Context, params *GetExpressionFiltersParams) (*http.Response, error) {
	req, err := NewGetExpressionFiltersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetExpressionFormats(ctx context.Context) (*http.Response, error) {
	req, err := NewGetExpressionFormatsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetExpressionTicket(ctx context.Context, params *GetExpressionTicketParams) (*http.Response, error) {
	req, err := NewGetExpressionTicketRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetExpressionFileById(ctx context.Context, expressionId string, params *GetExpressionFileByIdParams) (*http.Response, error) {
	req, err := NewGetExpressionFileByIdRequest(c.Server, expressionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetExpressionTicketById(ctx context.Context, expressionId string, params *GetExpressionTicketByIdParams) (*http.Response, error) {
	req, err := NewGetExpressionTicketByIdRequest(c.Server, expressionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjects(ctx context.Context, params *GetProjectsParams) (*http.Response, error) {
	req, err := NewGetProjectsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectFilters(ctx context.Context) (*http.Response, error) {
	req, err := NewGetProjectFiltersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectById(ctx context.Context, projectId string) (*http.Response, error) {
	req, err := NewGetProjectByIdRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetStudies(ctx context.Context, params *GetStudiesParams) (*http.Response, error) {
	req, err := NewGetStudiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetStudyFilters(ctx context.Context) (*http.Response, error) {
	req, err := NewGetStudyFiltersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetStudyById(ctx context.Context, studyId string) (*http.Response, error) {
	req, err := NewGetStudyByIdRequest(c.Server, studyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(req, ctx)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewGetContinuousFileRequest generates requests for GetContinuousFile
func NewGetContinuousFileRequest(server string, params *GetContinuousFileParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl.Path = path.Join(queryUrl.Path, fmt.Sprintf("/continuous/bytes"))

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "format", params.Format); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.ProjectID != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "projectID", *params.ProjectID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StudyID != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "studyID", *params.StudyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "version", *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SampleIDList != nil {

		if queryFrag, err := runtime.StyleParam("form", false, "sampleIDList", *params.SampleIDList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Chr != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "chr", *params.Chr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "start", *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.End != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "end", *params.End); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContinuousFiltersRequest generates requests for GetContinuousFilters
func NewGetContinuousFiltersRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl.Path = path.Join(queryUrl.Path, fmt.Sprintf("/continuous/filters"))

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContinuousFormatsRequest generates requests for GetContinuousFormats
func NewGetContinuousFormatsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl.Path = path.Join(queryUrl.Path, fmt.Sprintf("/continuous/formats"))

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContinuousTicketRequest generates requests for GetContinuousTicket
func NewGetContinuousTicketRequest(server string, params *GetContinuousTicketParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl.Path = path.Join(queryUrl.Path, fmt.Sprintf("/continuous/ticket"))

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "format", params.Format); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.ProjectID != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "projectID", *params.ProjectID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StudyID != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "studyID", *params.StudyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "version", *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SampleIDList != nil {

		if queryFrag, err := runtime.StyleParam("form", false, "sampleIDList", *params.SampleIDList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Chr != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "chr", *params.Chr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "start", *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.End != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "end", *params.End); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContinuousFileByIdRequest generates requests for GetContinuousFileById
func NewGetContinuousFileByIdRequest(server string, continuousId string, params *GetContinuousFileByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "continuousId", continuousId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl.Path = path.Join(queryUrl.Path, fmt.Sprintf("/continuous/%s/bytes", pathParam0))

	queryValues := queryUrl.Query()

	if params.Chr != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "chr", *params.Chr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "start", *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.End != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "end", *params.End); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContinuousTicketByIdRequest generates requests for GetContinuousTicketById
func NewGetContinuousTicketByIdRequest(server string, continuousId string, params *GetContinuousTicketByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "continuousId", continuousId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl.Path = path.Join(queryUrl.Path, fmt.Sprintf("/continuous/%s/ticket", pathParam0))

	queryValues := queryUrl.Query()

	if params.Chr != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "chr", *params.Chr); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Start != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "start", *params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.End != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "end", *params.End); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExpressionFileRequest generates requests for GetExpressionFile
func NewGetExpressionFileRequest(server string, params *GetExpressionFileParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl.Path = path.Join(queryUrl.Path, fmt.Sprintf("/expressions/bytes"))

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "format", params.Format); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.ProjectID != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "projectID", *params.ProjectID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StudyID != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "studyID", *params.StudyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "version", *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SampleIDList != nil {

		if queryFrag, err := runtime.StyleParam("form", false, "sampleIDList", *params.SampleIDList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FeatureIDList != nil {

		if queryFrag, err := runtime.StyleParam("form", false, "featureIDList", *params.FeatureIDList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FeatureNameList != nil {

		if queryFrag, err := runtime.StyleParam("form", false, "featureNameList", *params.FeatureNameList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExpressionFiltersRequest generates requests for GetExpressionFilters
func NewGetExpressionFiltersRequest(server string, params *GetExpressionFiltersParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl.Path = path.Join(queryUrl.Path, fmt.Sprintf("/expressions/filters"))

	queryValues := queryUrl.Query()

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "type", *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExpressionFormatsRequest generates requests for GetExpressionFormats
func NewGetExpressionFormatsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl.Path = path.Join(queryUrl.Path, fmt.Sprintf("/expressions/formats"))

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExpressionTicketRequest generates requests for GetExpressionTicket
func NewGetExpressionTicketRequest(server string, params *GetExpressionTicketParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl.Path = path.Join(queryUrl.Path, fmt.Sprintf("/expressions/ticket"))

	queryValues := queryUrl.Query()

	if queryFrag, err := runtime.StyleParam("form", true, "format", params.Format); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.ProjectID != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "projectID", *params.ProjectID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StudyID != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "studyID", *params.StudyID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "version", *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SampleIDList != nil {

		if queryFrag, err := runtime.StyleParam("form", false, "sampleIDList", *params.SampleIDList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FeatureIDList != nil {

		if queryFrag, err := runtime.StyleParam("form", false, "featureIDList", *params.FeatureIDList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FeatureNameList != nil {

		if queryFrag, err := runtime.StyleParam("form", false, "featureNameList", *params.FeatureNameList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExpressionFileByIdRequest generates requests for GetExpressionFileById
func NewGetExpressionFileByIdRequest(server string, expressionId string, params *GetExpressionFileByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "expressionId", expressionId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl.Path = path.Join(queryUrl.Path, fmt.Sprintf("/expressions/%s/bytes", pathParam0))

	queryValues := queryUrl.Query()

	if params.SampleIDList != nil {

		if queryFrag, err := runtime.StyleParam("form", false, "sampleIDList", *params.SampleIDList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FeatureIDList != nil {

		if queryFrag, err := runtime.StyleParam("form", false, "featureIDList", *params.FeatureIDList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FeatureNameList != nil {

		if queryFrag, err := runtime.StyleParam("form", false, "featureNameList", *params.FeatureNameList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetExpressionTicketByIdRequest generates requests for GetExpressionTicketById
func NewGetExpressionTicketByIdRequest(server string, expressionId string, params *GetExpressionTicketByIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "expressionId", expressionId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl.Path = path.Join(queryUrl.Path, fmt.Sprintf("/expressions/%s/ticket", pathParam0))

	queryValues := queryUrl.Query()

	if params.SampleIDList != nil {

		if queryFrag, err := runtime.StyleParam("form", false, "sampleIDList", *params.SampleIDList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FeatureIDList != nil {

		if queryFrag, err := runtime.StyleParam("form", false, "featureIDList", *params.FeatureIDList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FeatureNameList != nil {

		if queryFrag, err := runtime.StyleParam("form", false, "featureNameList", *params.FeatureNameList); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectsRequest generates requests for GetProjects
func NewGetProjectsRequest(server string, params *GetProjectsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl.Path = path.Join(queryUrl.Path, fmt.Sprintf("/projects"))

	queryValues := queryUrl.Query()

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "version", *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectFiltersRequest generates requests for GetProjectFilters
func NewGetProjectFiltersRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl.Path = path.Join(queryUrl.Path, fmt.Sprintf("/projects/filters"))

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectByIdRequest generates requests for GetProjectById
func NewGetProjectByIdRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "projectId", projectId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl.Path = path.Join(queryUrl.Path, fmt.Sprintf("/projects/%s", pathParam0))

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStudiesRequest generates requests for GetStudies
func NewGetStudiesRequest(server string, params *GetStudiesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl.Path = path.Join(queryUrl.Path, fmt.Sprintf("/studies"))

	queryValues := queryUrl.Query()

	if params.Version != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "version", *params.Version); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStudyFiltersRequest generates requests for GetStudyFilters
func NewGetStudyFiltersRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl.Path = path.Join(queryUrl.Path, fmt.Sprintf("/studies/filters"))

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStudyByIdRequest generates requests for GetStudyById
func NewGetStudyByIdRequest(server string, studyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "studyId", studyId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}
	queryUrl.Path = path.Join(queryUrl.Path, fmt.Sprintf("/studies/%s", pathParam0))

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		if !strings.HasSuffix(baseURL, "/") {
			baseURL += "/"
		}
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

type getContinuousFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON406      *Error
	JSON501      *Error
}

// Status returns HTTPResponse.Status
func (r getContinuousFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getContinuousFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getContinuousFiltersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Filter
	JSON400      *Error
	JSON406      *Error
	JSON501      *Error
}

// Status returns HTTPResponse.Status
func (r getContinuousFiltersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getContinuousFiltersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getContinuousFormatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
	JSON404      *Error
	JSON406      *Error
	JSON501      *Error
}

// Status returns HTTPResponse.Status
func (r getContinuousFormatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getContinuousFormatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getContinuousTicketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ticket
	JSON400      *Error
	JSON406      *Error
	JSON501      *Error
}

// Status returns HTTPResponse.Status
func (r getContinuousTicketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getContinuousTicketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getContinuousFileByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON406      *Error
	JSON501      *Error
}

// Status returns HTTPResponse.Status
func (r getContinuousFileByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getContinuousFileByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getContinuousTicketByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ticket
	JSON400      *Error
	JSON404      *Error
	JSON406      *Error
	JSON501      *Error
}

// Status returns HTTPResponse.Status
func (r getContinuousTicketByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getContinuousTicketByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getExpressionFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON406      *Error
	JSON501      *Error
}

// Status returns HTTPResponse.Status
func (r getExpressionFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getExpressionFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getExpressionFiltersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Filter
	JSON400      *Error
	JSON406      *Error
	JSON501      *Error
}

// Status returns HTTPResponse.Status
func (r getExpressionFiltersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getExpressionFiltersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getExpressionFormatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
	JSON404      *Error
	JSON406      *Error
	JSON501      *Error
}

// Status returns HTTPResponse.Status
func (r getExpressionFormatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getExpressionFormatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getExpressionTicketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ticket
	JSON400      *Error
	JSON406      *Error
	JSON501      *Error
}

// Status returns HTTPResponse.Status
func (r getExpressionTicketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getExpressionTicketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getExpressionFileByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON406      *Error
	JSON501      *Error
}

// Status returns HTTPResponse.Status
func (r getExpressionFileByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getExpressionFileByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getExpressionTicketByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ticket
	JSON400      *Error
	JSON404      *Error
	JSON406      *Error
	JSON501      *Error
}

// Status returns HTTPResponse.Status
func (r getExpressionTicketByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getExpressionTicketByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Project
	JSON400      *Error
	JSON406      *Error
	JSON501      *Error
}

// Status returns HTTPResponse.Status
func (r getProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getProjectFiltersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Filter
	JSON400      *Error
	JSON406      *Error
	JSON501      *Error
}

// Status returns HTTPResponse.Status
func (r getProjectFiltersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getProjectFiltersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getProjectByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
	JSON400      *Error
	JSON404      *Error
	JSON406      *Error
	JSON501      *Error
}

// Status returns HTTPResponse.Status
func (r getProjectByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getProjectByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getStudiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Study
	JSON400      *Error
	JSON406      *Error
	JSON501      *Error
}

// Status returns HTTPResponse.Status
func (r getStudiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getStudiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getStudyFiltersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Filter
	JSON400      *Error
	JSON406      *Error
	JSON501      *Error
}

// Status returns HTTPResponse.Status
func (r getStudyFiltersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getStudyFiltersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type getStudyByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Study
	JSON400      *Error
	JSON404      *Error
	JSON406      *Error
	JSON501      *Error
}

// Status returns HTTPResponse.Status
func (r getStudyByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r getStudyByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetContinuousFileWithResponse request returning *GetContinuousFileResponse
func (c *ClientWithResponses) GetContinuousFileWithResponse(ctx context.Context, params *GetContinuousFileParams) (*getContinuousFileResponse, error) {
	rsp, err := c.GetContinuousFile(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParsegetContinuousFileResponse(rsp)
}

// GetContinuousFiltersWithResponse request returning *GetContinuousFiltersResponse
func (c *ClientWithResponses) GetContinuousFiltersWithResponse(ctx context.Context) (*getContinuousFiltersResponse, error) {
	rsp, err := c.GetContinuousFilters(ctx)
	if err != nil {
		return nil, err
	}
	return ParsegetContinuousFiltersResponse(rsp)
}

// GetContinuousFormatsWithResponse request returning *GetContinuousFormatsResponse
func (c *ClientWithResponses) GetContinuousFormatsWithResponse(ctx context.Context) (*getContinuousFormatsResponse, error) {
	rsp, err := c.GetContinuousFormats(ctx)
	if err != nil {
		return nil, err
	}
	return ParsegetContinuousFormatsResponse(rsp)
}

// GetContinuousTicketWithResponse request returning *GetContinuousTicketResponse
func (c *ClientWithResponses) GetContinuousTicketWithResponse(ctx context.Context, params *GetContinuousTicketParams) (*getContinuousTicketResponse, error) {
	rsp, err := c.GetContinuousTicket(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParsegetContinuousTicketResponse(rsp)
}

// GetContinuousFileByIdWithResponse request returning *GetContinuousFileByIdResponse
func (c *ClientWithResponses) GetContinuousFileByIdWithResponse(ctx context.Context, continuousId string, params *GetContinuousFileByIdParams) (*getContinuousFileByIdResponse, error) {
	rsp, err := c.GetContinuousFileById(ctx, continuousId, params)
	if err != nil {
		return nil, err
	}
	return ParsegetContinuousFileByIdResponse(rsp)
}

// GetContinuousTicketByIdWithResponse request returning *GetContinuousTicketByIdResponse
func (c *ClientWithResponses) GetContinuousTicketByIdWithResponse(ctx context.Context, continuousId string, params *GetContinuousTicketByIdParams) (*getContinuousTicketByIdResponse, error) {
	rsp, err := c.GetContinuousTicketById(ctx, continuousId, params)
	if err != nil {
		return nil, err
	}
	return ParsegetContinuousTicketByIdResponse(rsp)
}

// GetExpressionFileWithResponse request returning *GetExpressionFileResponse
func (c *ClientWithResponses) GetExpressionFileWithResponse(ctx context.Context, params *GetExpressionFileParams) (*getExpressionFileResponse, error) {
	rsp, err := c.GetExpressionFile(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParsegetExpressionFileResponse(rsp)
}

// GetExpressionFiltersWithResponse request returning *GetExpressionFiltersResponse
func (c *ClientWithResponses) GetExpressionFiltersWithResponse(ctx context.Context, params *GetExpressionFiltersParams) (*getExpressionFiltersResponse, error) {
	rsp, err := c.GetExpressionFilters(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParsegetExpressionFiltersResponse(rsp)
}

// GetExpressionFormatsWithResponse request returning *GetExpressionFormatsResponse
func (c *ClientWithResponses) GetExpressionFormatsWithResponse(ctx context.Context) (*getExpressionFormatsResponse, error) {
	rsp, err := c.GetExpressionFormats(ctx)
	if err != nil {
		return nil, err
	}
	return ParsegetExpressionFormatsResponse(rsp)
}

// GetExpressionTicketWithResponse request returning *GetExpressionTicketResponse
func (c *ClientWithResponses) GetExpressionTicketWithResponse(ctx context.Context, params *GetExpressionTicketParams) (*getExpressionTicketResponse, error) {
	rsp, err := c.GetExpressionTicket(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParsegetExpressionTicketResponse(rsp)
}

// GetExpressionFileByIdWithResponse request returning *GetExpressionFileByIdResponse
func (c *ClientWithResponses) GetExpressionFileByIdWithResponse(ctx context.Context, expressionId string, params *GetExpressionFileByIdParams) (*getExpressionFileByIdResponse, error) {
	rsp, err := c.GetExpressionFileById(ctx, expressionId, params)
	if err != nil {
		return nil, err
	}
	return ParsegetExpressionFileByIdResponse(rsp)
}

// GetExpressionTicketByIdWithResponse request returning *GetExpressionTicketByIdResponse
func (c *ClientWithResponses) GetExpressionTicketByIdWithResponse(ctx context.Context, expressionId string, params *GetExpressionTicketByIdParams) (*getExpressionTicketByIdResponse, error) {
	rsp, err := c.GetExpressionTicketById(ctx, expressionId, params)
	if err != nil {
		return nil, err
	}
	return ParsegetExpressionTicketByIdResponse(rsp)
}

// GetProjectsWithResponse request returning *GetProjectsResponse
func (c *ClientWithResponses) GetProjectsWithResponse(ctx context.Context, params *GetProjectsParams) (*getProjectsResponse, error) {
	rsp, err := c.GetProjects(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParsegetProjectsResponse(rsp)
}

// GetProjectFiltersWithResponse request returning *GetProjectFiltersResponse
func (c *ClientWithResponses) GetProjectFiltersWithResponse(ctx context.Context) (*getProjectFiltersResponse, error) {
	rsp, err := c.GetProjectFilters(ctx)
	if err != nil {
		return nil, err
	}
	return ParsegetProjectFiltersResponse(rsp)
}

// GetProjectByIdWithResponse request returning *GetProjectByIdResponse
func (c *ClientWithResponses) GetProjectByIdWithResponse(ctx context.Context, projectId string) (*getProjectByIdResponse, error) {
	rsp, err := c.GetProjectById(ctx, projectId)
	if err != nil {
		return nil, err
	}
	return ParsegetProjectByIdResponse(rsp)
}

// GetStudiesWithResponse request returning *GetStudiesResponse
func (c *ClientWithResponses) GetStudiesWithResponse(ctx context.Context, params *GetStudiesParams) (*getStudiesResponse, error) {
	rsp, err := c.GetStudies(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParsegetStudiesResponse(rsp)
}

// GetStudyFiltersWithResponse request returning *GetStudyFiltersResponse
func (c *ClientWithResponses) GetStudyFiltersWithResponse(ctx context.Context) (*getStudyFiltersResponse, error) {
	rsp, err := c.GetStudyFilters(ctx)
	if err != nil {
		return nil, err
	}
	return ParsegetStudyFiltersResponse(rsp)
}

// GetStudyByIdWithResponse request returning *GetStudyByIdResponse
func (c *ClientWithResponses) GetStudyByIdWithResponse(ctx context.Context, studyId string) (*getStudyByIdResponse, error) {
	rsp, err := c.GetStudyById(ctx, studyId)
	if err != nil {
		return nil, err
	}
	return ParsegetStudyByIdResponse(rsp)
}

// ParsegetContinuousFileResponse parses an HTTP response from a GetContinuousFileWithResponse call
func ParsegetContinuousFileResponse(rsp *http.Response) (*getContinuousFileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getContinuousFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		response.JSON406 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON406); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		response.JSON501 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON501); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParsegetContinuousFiltersResponse parses an HTTP response from a GetContinuousFiltersWithResponse call
func ParsegetContinuousFiltersResponse(rsp *http.Response) (*getContinuousFiltersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getContinuousFiltersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &[]Filter{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		response.JSON406 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON406); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		response.JSON501 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON501); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParsegetContinuousFormatsResponse parses an HTTP response from a GetContinuousFormatsWithResponse call
func ParsegetContinuousFormatsResponse(rsp *http.Response) (*getContinuousFormatsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getContinuousFormatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &[]string{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		response.JSON404 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON404); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		response.JSON406 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON406); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		response.JSON501 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON501); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParsegetContinuousTicketResponse parses an HTTP response from a GetContinuousTicketWithResponse call
func ParsegetContinuousTicketResponse(rsp *http.Response) (*getContinuousTicketResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getContinuousTicketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &Ticket{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		response.JSON406 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON406); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		response.JSON501 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON501); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParsegetContinuousFileByIdResponse parses an HTTP response from a GetContinuousFileByIdWithResponse call
func ParsegetContinuousFileByIdResponse(rsp *http.Response) (*getContinuousFileByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getContinuousFileByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		response.JSON404 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON404); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		response.JSON406 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON406); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		response.JSON501 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON501); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParsegetContinuousTicketByIdResponse parses an HTTP response from a GetContinuousTicketByIdWithResponse call
func ParsegetContinuousTicketByIdResponse(rsp *http.Response) (*getContinuousTicketByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getContinuousTicketByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &Ticket{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		response.JSON404 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON404); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		response.JSON406 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON406); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		response.JSON501 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON501); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParsegetExpressionFileResponse parses an HTTP response from a GetExpressionFileWithResponse call
func ParsegetExpressionFileResponse(rsp *http.Response) (*getExpressionFileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getExpressionFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		response.JSON406 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON406); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		response.JSON501 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON501); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParsegetExpressionFiltersResponse parses an HTTP response from a GetExpressionFiltersWithResponse call
func ParsegetExpressionFiltersResponse(rsp *http.Response) (*getExpressionFiltersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getExpressionFiltersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &[]Filter{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		response.JSON406 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON406); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		response.JSON501 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON501); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParsegetExpressionFormatsResponse parses an HTTP response from a GetExpressionFormatsWithResponse call
func ParsegetExpressionFormatsResponse(rsp *http.Response) (*getExpressionFormatsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getExpressionFormatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &[]string{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		response.JSON404 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON404); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		response.JSON406 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON406); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		response.JSON501 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON501); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParsegetExpressionTicketResponse parses an HTTP response from a GetExpressionTicketWithResponse call
func ParsegetExpressionTicketResponse(rsp *http.Response) (*getExpressionTicketResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getExpressionTicketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &Ticket{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		response.JSON406 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON406); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		response.JSON501 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON501); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParsegetExpressionFileByIdResponse parses an HTTP response from a GetExpressionFileByIdWithResponse call
func ParsegetExpressionFileByIdResponse(rsp *http.Response) (*getExpressionFileByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getExpressionFileByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		response.JSON404 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON404); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		response.JSON406 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON406); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		response.JSON501 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON501); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParsegetExpressionTicketByIdResponse parses an HTTP response from a GetExpressionTicketByIdWithResponse call
func ParsegetExpressionTicketByIdResponse(rsp *http.Response) (*getExpressionTicketByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getExpressionTicketByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &Ticket{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		response.JSON404 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON404); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		response.JSON406 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON406); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		response.JSON501 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON501); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParsegetProjectsResponse parses an HTTP response from a GetProjectsWithResponse call
func ParsegetProjectsResponse(rsp *http.Response) (*getProjectsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &[]Project{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		response.JSON406 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON406); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		response.JSON501 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON501); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParsegetProjectFiltersResponse parses an HTTP response from a GetProjectFiltersWithResponse call
func ParsegetProjectFiltersResponse(rsp *http.Response) (*getProjectFiltersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getProjectFiltersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &[]Filter{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		response.JSON406 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON406); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		response.JSON501 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON501); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParsegetProjectByIdResponse parses an HTTP response from a GetProjectByIdWithResponse call
func ParsegetProjectByIdResponse(rsp *http.Response) (*getProjectByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getProjectByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &Project{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		response.JSON404 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON404); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		response.JSON406 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON406); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		response.JSON501 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON501); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParsegetStudiesResponse parses an HTTP response from a GetStudiesWithResponse call
func ParsegetStudiesResponse(rsp *http.Response) (*getStudiesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getStudiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &[]Study{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		response.JSON406 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON406); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		response.JSON501 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON501); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParsegetStudyFiltersResponse parses an HTTP response from a GetStudyFiltersWithResponse call
func ParsegetStudyFiltersResponse(rsp *http.Response) (*getStudyFiltersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getStudyFiltersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &[]Filter{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		response.JSON406 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON406); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		response.JSON501 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON501); err != nil {
			return nil, err
		}

	}

	return response, nil
}

// ParsegetStudyByIdResponse parses an HTTP response from a GetStudyByIdWithResponse call
func ParsegetStudyByIdResponse(rsp *http.Response) (*getStudyByIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &getStudyByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		response.JSON200 = &Study{}
		if err := json.Unmarshal(bodyBytes, response.JSON200); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		response.JSON400 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON400); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		response.JSON404 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON404); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		response.JSON406 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON406); err != nil {
			return nil, err
		}

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		response.JSON501 = &Error{}
		if err := json.Unmarshal(bodyBytes, response.JSON501); err != nil {
			return nil, err
		}

	}

	return response, nil
}
